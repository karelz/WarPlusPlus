unit Jednotka extends Unit
{

  Unit lastMinedUnit;
  Position lastMinedPos;

  // Stav pri težení
  int nMineState; 
  /* 0 - hledame jednotku
     1 - hledame jednotku, uz jsme se presunuli na pozadovanou pozici
     2 - nalezena jednotka, jsme u ni, tezime
     3 - letime zpatky a vykladame
   */

// Reakce na prikaz MOVE
// Dojde s jednotkou na zadanou pozici
// Pokud se jednotka nemuze hybat, okamzite vrati
command MOVE ( Position posDestination ) 
{
  // Kdyz se nemuzu hybat -> nic
  if ( Move == null ) return;

  // Zavolam na sobe dovednost Move
  Move.Go ( posDestination.x, posDestination.y );
}

// Reakce na prikaz ATTACK
// Zautoci na jednotku
// Pokud na jednotku nejde utocit, dojde k ni bliz a zkusi to znovu
// Skonci pokud se povedlo jednotku zabit
command ATTACK ( Unit uEnemy ) 
{
  // Kdyz nemuzu utocit kulkama -> nic
  if ( ( BulletAttack == null ) || ( !BulletAttack.CanAttackUnit ( uEnemy ) ) ) return;

  // Nekonecny cyklus
  while ( true )
  {
    // Zkus zautocit
    if ( BulletAttack.Fire ( uEnemy ) )
    { // Hura, nepritel zemrel
      return;
    }
    // Kdyz nemuzu utocit kulkama -> nic
    if ( !BulletAttack.CanAttackUnit ( uEnemy ) ) return;

    // Nejde to -> dojdi k nemu
    Position posNear, posMy, posEnemy;
    posMy = GetPosition ();
    posEnemy = uEnemy.GetPosition ();
    posNear.x = ( posMy.x + posEnemy.x ) / 2;
    posNear.y = ( posMy.y + posEnemy.y ) / 2;

    Move.Go ( posNear.x, posNear.y );
  }
}

// Najde jednotku, která je težitelná a nejblíže dané pozici
Unit FindClosestMineable(Position pos) {
  Unit u, closest, us{};
  us=GetMap().GetAllUnitsInArea(pos.x, pos.y, GetViewRadius());
  int dist=GetViewRadius()*10, d;
  closest=null;
  for(u in us) {
    if(u.GetUnitTypeName()=="Crystal") {
      Position posTmp=u.GetPosition();
      d=pos.GetDistancePos(posTmp);
      if(d<dist) {
        dist=d;
        closest=u;
      }
    }
  }
  return closest;
}

// Dopraví se na dostatecnou vzdálenost k zadané jednotce,
// tak aby se dalo težit/vykládat
void GoNearby(Position pos, bool bMine) {
  Move.Go(pos.x, pos.y);
}

// Vrací false, pokud je jednotka nepoužitelná (null/mrtvá)
bool IsAlive(Unit u) {
  if(u==null) return false;
  return !u.IsDead();
}

// Reakce na prikaz MINEUNLOAD
command MINEUNLOAD(Position posMine, Unit uUnload)
{
  if(uUnload.GetUnitTypeName()!="Base") 
  {
    return;
  }

  lastMinedUnit=null;
  lastMinedPos=posMine;
  nMineState=0;

  while(true) {
    Position pos;

    if(nMineState<=1) { // Letíme k jednotce
     
      // Jestliže nemáme jednotku k težení, nebo ji máme a je mrtvá
      if(!IsAlive(lastMinedUnit)) {
        // Zkoušíme najít další `pro težení
        lastMinedUnit=FindClosestMineable(lastMinedPos);
      }
      if(IsAlive(lastMinedUnit)) {
        // Povedlo se najít jednotku
        lastMinedPos=lastMinedUnit.GetPosition();
        // Priletíme k ní
        GoNearby(lastMinedPos, true);
        // A nastavíme se na stav - u jednotky
        nMineState=2;
      } else {
        // Jednotku se najít nepovedlo. Možná je problém v tom, že není zatím
        // videt. Letíme nejprve na zadané místo, jestliže jsme tam ješte neleteli
        if(nMineState==0) {
          Move.Go(lastMinedPos.x, lastMinedPos.y);
          nMineState=1;
        } else {
          // Ani po presunu se težené jednotky nepodarilo najít
          // Koncíme
          return;
        }
      }
    } else if(nMineState==2) { // Jsme u jednotky, chceme težit
      if(!IsAlive(lastMinedUnit)) {
        // Jednotka nám zatím zmizela, zkoušíme najít jinou
        nMineState=1;
        continue;
      } else {
        Mine.Mine(lastMinedUnit);
        nMineState=3;
      }
    } else if(nMineState==3) { // Letíme zpátky, vykládáme
      if(uUnload!=null) {
        pos=uUnload.GetPosition();
        GoNearby(pos, false);
        if(uUnload.IsDead()) {
          // Zemrela nám báze, koncíme
          return;
        }
        // Vyložíme
        Mine.Unload(uUnload);
        nMineState=0;
      } else return;
    } 
  }
}

}