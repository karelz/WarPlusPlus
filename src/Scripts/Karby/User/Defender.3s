unit Defender
{

// jednotka, na kterou utocim
Unit uAttackedEnemy;

// je uz tato jednotka na spravne pozici?
bool bInitialized;

constructor
{
  bInitialized = false;
}


// reakce na informace od velitele
notification PREFERRED_ATTACK(BestEnemy sBestEnemyUnits[])
{
  if (!bInitialized)
    return;

  int i;

  // utocime na nekoho?
  if (uAttackedEnemy != null)
  {
    // je dana jednotka mezi kandidaty? kdyz ano, tak nic nedelame (strilime dal)
    for (i = 0; i < sBestEnemyUnits.GetLength(); i++)
    {
      if (uAttackedEnemy == sBestEnemyUnits[i].uEnemy)
        break;
    }
    if (i < sBestEnemyUnits.GetLength())
      return;
  }

  // jednotka, na kterou utocime, neni mezi kandidaty,
  // nebo zrovna nemame nic na praci

  // nejlepsi kandidat
  Unit uBestEnemy;
  int nBestEnemyDistance = 1000000;

  // jdeme utocit na nekterou z kandidatu
  for (i = 0; i < sBestEnemyUnits.GetLength(); i++)
  {
    Position posEnemy = sBestEnemyUnits[i].uEnemy.GetPosition();
    if ((posEnemy.z < BulletAttack.GetAttackAltMin()) || (posEnemy.z > BulletAttack.GetAttackAltMax()))
      continue;
    int nEnemyDistance = posEnemy.GetDistancePos(GetPosition());
    if (nEnemyDistance < BulletAttack.GetAttackRadius())
      break;
    if (nEnemyDistance < nBestEnemyDistance)
    {
      uBestEnemy = sBestEnemyUnits[i].uEnemy;
      nBestEnemyDistance = nEnemyDistance;
    }
  }

  // nektery z kandidatu je rovnou na dostrel
  if (i < sBestEnemyUnits.GetLength())
  {
    // nejaka jednotka je na dostrel, neni o cem premyslet :-)
    EmptyCommandQueue(true, false);
    this<-ATTACK(sBestEnemyUnits[i].uEnemy);
    return;
  }

  // zadny z kandidatu neni dost blizko, mame ale vybraneho nejblizsiho (pokud to neni null)
  if (uBestEnemy != null)
  {
    EmptyCommandQueue(true, false);
    this<-ATTACK(uBestEnemy);
  }
}


// vlastni prikaz k utoku
command ATTACK(Unit uEnemy)
{
  // nastavime si promennou, aby notifikace PREFERRED_ATTACK vedela, co se momentalne deje
  uAttackedEnemy = uEnemy;

  // jednou zjistime polomer utoku
  int nAttackRadius = BulletAttack.GetAttackRadius();

  // dokud nebude nepritel mrtev
  while (!uEnemy.IsDead())
  {
    Position posEnemy = uEnemy.GetPosition();
    DefendCommander uCommander = GetCommander();
    int nEnemyDistanceFromCommander = posEnemy.GetDistancePos(uCommander.posDefendPosition);

    // pokud je nepritel moc daleko od commandera, tak na nej kasleme
    if (nEnemyDistanceFromCommander > uCommander.nDefendRadius)
    {
      uAttackedEnemy = null;
      return;
    }

    Position posMy = GetPosition();
    int nEnemyDistance = posEnemy.GetDistancePos(posMy);

    if (nEnemyDistance > nAttackRadius)
    {
      // jsme daleko

      // najdeme polovinu
      Position posMidPoint;
      posMidPoint.x = (posEnemy.x + posMy.x) / 2;
      posMidPoint.y = (posEnemy.y + posMy.y) / 2;

      if (Move.GoCloseToPos(posMidPoint, 5) != 0)
      {
        Sleep(10);
        continue;
      }
    }

    // zkusime zautocit
    BulletAttack.Fire(uEnemy);
  }

  // parada, zabili jsme ho...
  uAttackedEnemy = null;
}


// pocatecni inicializace
command DEFENDER_INITIALIZE(Position posCenter, int nRadius)
{
  while (true)
  {
    int nMoveResult = Move.GoCloseToPos(posCenter, nRadius);
    if (nMoveResult == 0)
    {
      bInitialized = true;
      return;
    }
    if ((nMoveResult == 1) || (nMoveResult == -1))
      return;
    Sleep(50);
  }
}


// necinnost
notification IDLE()
{
  Unit uCommander = GetCommander();
  uCommander<-DEFENDER_IDLE(this);
}


}  // unit Defender
