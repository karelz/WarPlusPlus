
/*  A Bison parser, made from d:\Data\Projekt\TheGame\TripleS\Compiler\Bison\Syntax.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IDENTIFIER	258
#define	BREAK	259
#define	CASE	260
#define	CONTINUE	261
#define	CONSTRUCTOR	262
#define	DEFAULT	263
#define	DESTRUCTOR	264
#define	DO	265
#define	DUP	266
#define	ELSE	267
#define	COMMAND	268
#define	NOTIFICATION	269
#define	EXTENDS	270
#define	FOR	271
#define	IF	272
#define	IN_KWD	273
#define	INSTANCEOF_TOKEN	274
#define	RETURN	275
#define	SENDTO	276
#define	STRUCT	277
#define	SUPER	278
#define	SWITCH	279
#define	UNIT	280
#define	VOID_TYPE	281
#define	WAIT	282
#define	WAITFIRST	283
#define	WHILE	284
#define	THIS_KWD	285
#define	TYPE_BOOL	286
#define	TYPE_CHAR	287
#define	TYPE_INT	288
#define	TYPE_FLOAT	289
#define	LITERAL_INT	290
#define	LITERAL_FLOAT	291
#define	LITERAL_BOOL	292
#define	LITERAL_STRING	293
#define	LITERAL_CHAR	294
#define	BACKARROW	295
#define	PLUSASS	296
#define	MINUSASS	297
#define	MULTASS	298
#define	DIVASS	299
#define	MODASS	300
#define	AND	301
#define	OR	302
#define	EQ	303
#define	NEQ	304
#define	LEQ	305
#define	GEQ	306
#define	PLUSPLUS	307
#define	MINUSMINUS	308
#define	UNARYPLUS	309
#define	UNARYMINUS	310
#define	PLUSPLUSPOSTFIX	311
#define	MINUSMINUSPOSTFIX	312


/************************************************************
 *
 * Projekt: Strategicka hra
 *    Cast: Prekladac
 *   Autor: Helena Kupková
 *  
 *   Popis: Parser - syntakticka analyza
 * 
 ***********************************************************/

#include "stdafx.h"
#include "CompilerKernel.h"
#include "PLex2ndPass.h"

#include <malloc.h>
#define alloca  _alloca

#define YYSTYPE CPExpr
#define YYPARSE_PARAM pCompKrnl

#define YYDEBUG             1
#define YYERROR_VERBOSE

#define yylex   ((CCompilerKernel*)pCompKrnl)->m_pLex2ndPass->YyLex
#define yyerror ((CCompilerKernel*)pCompKrnl)->ParserError


#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		443
#define	YYFLAG		-32768
#define	YYNTBASE	77

#define YYTRANSLATE(x) ((unsigned)(x) <= 312 ? yytranslate[x] : 181)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    64,     2,     2,     2,    59,     2,     2,    67,
    68,    57,    55,    72,    56,    76,    58,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    75,    71,    51,
    41,    52,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    73,     2,    74,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    69,     2,    70,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    53,    54,    60,    61,    62,    63,
    65,    66
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     9,    11,    12,    20,    21,    29,
    30,    36,    37,    44,    45,    47,    50,    54,    55,    57,
    59,    62,    67,    71,    78,    79,    83,    84,    88,    96,
   104,   112,   120,   129,   138,   147,   156,   157,   158,   159,
   160,   162,   166,   168,   170,   172,   174,   179,   184,   188,
   189,   191,   193,   197,   201,   203,   207,   211,   213,   216,
   221,   226,   233,   235,   237,   239,   241,   243,   245,   247,
   252,   253,   254,   256,   258,   261,   263,   265,   270,   272,
   276,   279,   281,   283,   285,   286,   289,   292,   294,   299,
   304,   308,   311,   314,   317,   320,   323,   326,   329,   332,
   335,   338,   341,   344,   347,   350,   351,   353,   356,   362,
   370,   376,   384,   385,   392,   393,   400,   401,   406,   407,
   409,   411,   414,   417,   419,   422,   426,   429,   437,   445,
   451,   457,   467,   477,   478,   487,   488,   490,   491,   493,
   495,   497,   501,   505,   508,   511,   514,   518,   522,   531,
   532,   533,   543,   545,   549,   550,   552,   554,   556,   559,
   563,   569,   575,   576,   578,   580,   582,   584,   586,   590,
   594,   596,   598,   600,   602,   604,   605,   607,   609,   613,
   617,   625,   633,   639,   645,   653,   661,   662,   663,   664,
   669,   674,   676,   678,   681,   683,   686,   689,   691,   694,
   697,   700,   703,   706,   708,   712,   716,   720,   722,   726,
   730,   732,   736,   740,   744,   748,   752,   756,   758,   762,
   766,   768,   772,   774,   778,   782,   784,   786,   788,   790,
   792,   794,   796,   798
};

static const short yyrhs[] = {    78,
     0,    80,     0,    78,    80,     0,   108,     0,    26,     0,
     0,    79,     3,    67,    81,   102,    68,   111,     0,     0,
    79,     3,    67,    82,     1,    68,   111,     0,     0,    25,
     3,    85,    83,    87,     0,     0,    22,     3,    84,    69,
   106,    70,     0,     0,    86,     0,    15,     3,     0,    69,
    88,    70,     0,     0,    89,     0,    90,     0,    89,    90,
     0,   108,    96,    97,    71,     0,   108,    96,     1,     0,
   108,    96,     1,    72,    97,    71,     0,     0,     7,    91,
   111,     0,     0,     9,    92,   111,     0,    13,     3,    67,
    94,   102,    68,   111,     0,    13,     3,    67,    94,     1,
    68,   111,     0,    14,     3,    67,    95,   102,    68,   111,
     0,    14,     3,    67,    95,     1,    68,   111,     0,    26,
    96,     3,    67,    93,   102,    68,   111,     0,    26,    96,
     3,    67,    93,     1,    68,   111,     0,   108,    96,     3,
    67,    93,   102,    68,   111,     0,   108,    96,     3,    67,
    93,     1,    68,   111,     0,     0,     0,     0,     0,    98,
     0,    97,    72,    98,     0,    99,     0,   100,     0,   101,
     0,     3,     0,     3,    73,   179,    74,     0,   100,    73,
   179,    74,     0,     3,    69,    70,     0,     0,   103,     0,
   104,     0,   103,    72,   104,     0,   108,    96,   105,     0,
     3,     0,   105,    73,    74,     0,     3,    69,    70,     0,
   107,     0,   106,   107,     0,   108,    96,    97,    71,     0,
   108,    96,     1,    71,     0,   108,    96,     1,    72,    97,
    71,     0,   109,     0,   110,     0,    31,     0,    32,     0,
    33,     0,    34,     0,     3,     0,    69,   112,   113,    70,
     0,     0,     0,   114,     0,   115,     0,   114,   115,     0,
   116,     0,   124,     0,   108,    96,   117,    71,     0,   118,
     0,   117,    72,   118,     0,   119,   120,     0,   121,     0,
   122,     0,   123,     0,     0,    41,   177,     0,    41,     1,
     0,     3,     0,     3,    73,   179,    74,     0,   122,    73,
   179,    74,     0,     3,    69,    70,     0,   111,   125,     0,
   126,   125,     0,   127,   125,     0,   128,   125,     0,   129,
   125,     0,   139,   125,     0,   140,   125,     0,   141,   125,
     0,   147,   125,     0,   146,   125,     0,   148,   125,     0,
   149,   125,     0,   151,   125,     0,     1,   125,     0,     0,
    71,     0,   177,    71,     0,    17,    67,   180,    68,   124,
     0,    17,    67,   180,    68,   124,    12,   124,     0,    17,
    67,     1,    68,   124,     0,    17,    67,     1,    68,   124,
    12,   124,     0,     0,    24,    67,   177,    68,   130,   132,
     0,     0,    24,    67,     1,    68,   131,   132,     0,     0,
    69,   133,   134,    70,     0,     0,   135,     0,   136,     0,
   135,   136,     0,   137,   114,     0,   138,     0,   137,   138,
     0,     5,   179,    75,     0,     8,    75,     0,    10,   124,
    29,    67,   180,    68,    71,     0,    10,   124,    29,    67,
     1,    68,    71,     0,    29,    67,   180,    68,   124,     0,
    29,    67,     1,    68,   124,     0,    16,    67,   143,    71,
   180,    71,   144,    68,   124,     0,    16,    67,   143,    71,
     1,    71,   144,    68,   124,     0,     0,    16,    67,   167,
    18,   158,    68,   142,   111,     0,     0,   145,     0,     0,
   145,     0,   177,     0,     1,     0,   145,    72,   177,     0,
   145,    72,     1,     0,     4,    71,     0,     6,    71,     0,
    20,    71,     0,    20,   177,    71,     0,    20,     1,    71,
     0,   158,    40,     3,   150,    67,   159,    68,    71,     0,
     0,     0,    21,   152,    67,   153,    68,   154,    69,   155,
    70,     0,   158,     0,   153,    72,   158,     0,     0,    27,
     0,    28,     0,    14,     0,   156,    71,     0,   155,   156,
    71,     0,     3,    67,   157,   159,    68,     0,     3,    67,
   157,     1,    68,     0,     0,    35,     0,    36,     0,    37,
     0,    38,     0,    39,     0,    67,   177,    68,     0,    67,
     1,    68,     0,   161,     0,   162,     0,   166,     0,   167,
     0,    30,     0,     0,   160,     0,   177,     0,   160,    72,
   177,     0,   158,    76,     3,     0,   158,    76,     3,    67,
   163,   159,    68,     0,   158,    76,     3,    67,   163,     1,
    68,     0,     3,    67,   164,   159,    68,     0,     3,    67,
   164,     1,    68,     0,    23,    76,     3,    67,   165,   159,
    68,     0,    23,    76,     3,    67,   165,     1,    68,     0,
     0,     0,     0,   158,    73,   177,    74,     0,   158,    73,
     1,    74,     0,     3,     0,   158,     0,    11,   158,     0,
   168,     0,   169,    60,     0,   169,    61,     0,   169,     0,
    60,   170,     0,    61,   170,     0,    55,   170,     0,    56,
   170,     0,    64,   170,     0,   170,     0,   171,    57,   170,
     0,   171,    58,   170,     0,   171,    59,   170,     0,   171,
     0,   172,    55,   171,     0,   172,    56,   171,     0,   172,
     0,   173,    51,   172,     0,   173,    52,   172,     0,   173,
    53,   172,     0,   173,    54,   172,     0,   173,    19,   110,
     0,   172,    18,   172,     0,   173,     0,   174,    49,   173,
     0,   174,    50,   173,     0,   174,     0,   175,    47,   174,
     0,   175,     0,   176,    48,   175,     0,   158,   178,   177,
     0,   176,     0,    41,     0,    44,     0,    45,     0,    46,
     0,    42,     0,    43,     0,   177,     0,   177,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   146,   149,   150,   156,   157,   160,   161,   163,   164,   166,
   167,   168,   169,   174,   175,   178,   181,   184,   185,   188,
   189,   192,   194,   195,   198,   199,   202,   203,   206,   209,
   212,   215,   219,   222,   225,   228,   232,   235,   238,   241,
   245,   246,   249,   250,   251,   254,   257,   259,   263,   268,
   269,   272,   273,   276,   280,   281,   282,   287,   288,   291,
   292,   293,   298,   299,   302,   303,   304,   305,   308,   314,
   318,   321,   322,   325,   326,   329,   330,   335,   338,   339,
   342,   345,   346,   347,   351,   352,   353,   356,   361,   362,
   365,   371,   372,   373,   374,   375,   376,   377,   378,   379,
   380,   381,   382,   383,   385,   388,   392,   396,   401,   402,
   404,   405,   410,   411,   412,   413,   416,   417,   420,   421,
   424,   425,   428,   431,   432,   435,   436,   441,   442,   447,
   448,   453,   456,   458,   459,   462,   463,   466,   467,   470,
   471,   472,   473,   478,   483,   488,   489,   490,   495,   502,
   507,   508,   513,   514,   518,   519,   520,   521,   524,   525,
   528,   530,   534,   542,   543,   544,   545,   546,   547,   548,
   549,   550,   551,   552,   553,   556,   557,   560,   561,   564,
   567,   570,   573,   576,   579,   582,   587,   590,   593,   596,
   597,   600,   603,   604,   607,   608,   610,   614,   615,   617,
   619,   621,   623,   627,   628,   630,   632,   636,   637,   639,
   643,   644,   645,   646,   647,   648,   650,   653,   654,   655,
   658,   659,   662,   663,   666,   667,   670,   671,   672,   673,
   674,   675,   678,   681
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","IDENTIFIER",
"BREAK","CASE","CONTINUE","CONSTRUCTOR","DEFAULT","DESTRUCTOR","DO","DUP","ELSE",
"COMMAND","NOTIFICATION","EXTENDS","FOR","IF","IN_KWD","INSTANCEOF_TOKEN","RETURN",
"SENDTO","STRUCT","SUPER","SWITCH","UNIT","VOID_TYPE","WAIT","WAITFIRST","WHILE",
"THIS_KWD","TYPE_BOOL","TYPE_CHAR","TYPE_INT","TYPE_FLOAT","LITERAL_INT","LITERAL_FLOAT",
"LITERAL_BOOL","LITERAL_STRING","LITERAL_CHAR","BACKARROW","'='","PLUSASS","MINUSASS",
"MULTASS","DIVASS","MODASS","AND","OR","EQ","NEQ","'<'","'>'","LEQ","GEQ","'+'",
"'-'","'*'","'/'","'%'","PLUSPLUS","MINUSMINUS","UNARYPLUS","UNARYMINUS","'!'",
"PLUSPLUSPOSTFIX","MINUSMINUSPOSTFIX","'('","')'","'{'","'}'","';'","','","'['",
"']'","':'","'.'","Input","UnitOrGlobalFunctionDeclS","ReturnType","UnitOrGlobalFunctionDecl",
"@1","@2","@3","@4","Super_opt","Super","UnitBody","UnitItemDeclS_opt","UnitItemDeclS",
"UnitItemDecl","@5","@6","OnMethodBegins","OnCommandBegins","OnNotificationBegins",
"SetCurrentType","FieldVarDeclS","FieldVarDecl","SimpleFieldVarDecl","ArrayFieldVarDecl",
"SetFieldVarDecl","FormalParamList_opt","FormalParamList","FormalParam","ParamDecl",
"StructItemsDeclS","StructItemsDecl","Type","PrimitiveType","ReferenceType",
"Block","OnBlockBegins","BlockStmtS_opt","BlockStmtS","BlockStmt","LocalVarDeclStmt",
"LocalVarDeclS","LocalVarDecl","LocalVarDeclNotInit","VariableInit_opt","SimpleVarDecl",
"ArrayVarDecl","SetVarDecl","Statement","OnEndOfStatement","EmptyStmt","ExprStmt",
"IfStmt","SwitchStmt","@7","@8","SwitchBlock","@9","SwitchBlockStmtGroupS_opt",
"SwitchBlockStmtGroupS","SwitchBlockStmtGroup","SwitchLabelS","SwitchLabel",
"DoStmt","WhileStmt","ForStmt","@10","ForInit_opt","ForUpdate_opt","ExprList",
"BreakStmt","ContinueStmt","ReturnStmt","EventCallStmt","OnEventCallBegins",
"SentToStmt","@11","PrimaryExprList","SendToOptions","SendToEventList","SendToEvent",
"OnSendToEventBegins","PrimaryExpr","ArgumentList_opt","ArgumentList","FieldAccess",
"MethodInvocation","OnMethodInvocPrimaryIdentBegins","OnMethodInvocIdentBegins",
"OnMethodInvocSuperBegins","ArrayAccess","LocalVarOrMember","DupExpr","PostfixExpr",
"UnaryExpr","MultiplExpr","AddExpr","RelatExpr","EqualityExpr","AndExpr","OrExpr",
"Expr","AssignOperator","ConstantExpr","BoolExpr", NULL
};
#endif

static const short yyr1[] = {     0,
    77,    78,    78,    79,    79,    81,    80,    82,    80,    83,
    80,    84,    80,    85,    85,    86,    87,    88,    88,    89,
    89,    90,    90,    90,    91,    90,    92,    90,    90,    90,
    90,    90,    90,    90,    90,    90,    93,    94,    95,    96,
    97,    97,    98,    98,    98,    99,   100,   100,   101,   102,
   102,   103,   103,   104,   105,   105,   105,   106,   106,   107,
   107,   107,   108,   108,   109,   109,   109,   109,   110,   111,
   112,   113,   113,   114,   114,   115,   115,   116,   117,   117,
   118,   119,   119,   119,   120,   120,   120,   121,   122,   122,
   123,   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   125,   126,   127,   128,   128,
   128,   128,   130,   129,   131,   129,   133,   132,   134,   134,
   135,   135,   136,   137,   137,   138,   138,   139,   139,   140,
   140,   141,   141,   142,   141,   143,   143,   144,   144,   145,
   145,   145,   145,   146,   147,   148,   148,   148,   149,   150,
   152,   151,   153,   153,   154,   154,   154,   154,   155,   155,
   156,   156,   157,   158,   158,   158,   158,   158,   158,   158,
   158,   158,   158,   158,   158,   159,   159,   160,   160,   161,
   162,   162,   162,   162,   162,   162,   163,   164,   165,   166,
   166,   167,   168,   168,   169,   169,   169,   170,   170,   170,
   170,   170,   170,   171,   171,   171,   171,   172,   172,   172,
   173,   173,   173,   173,   173,   173,   173,   174,   174,   174,
   175,   175,   176,   176,   177,   177,   178,   178,   178,   178,
   178,   178,   179,   180
};

static const short yyr2[] = {     0,
     1,     1,     2,     1,     1,     0,     7,     0,     7,     0,
     5,     0,     6,     0,     1,     2,     3,     0,     1,     1,
     2,     4,     3,     6,     0,     3,     0,     3,     7,     7,
     7,     7,     8,     8,     8,     8,     0,     0,     0,     0,
     1,     3,     1,     1,     1,     1,     4,     4,     3,     0,
     1,     1,     3,     3,     1,     3,     3,     1,     2,     4,
     4,     6,     1,     1,     1,     1,     1,     1,     1,     4,
     0,     0,     1,     1,     2,     1,     1,     4,     1,     3,
     2,     1,     1,     1,     0,     2,     2,     1,     4,     4,
     3,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     0,     1,     2,     5,     7,
     5,     7,     0,     6,     0,     6,     0,     4,     0,     1,
     1,     2,     2,     1,     2,     3,     2,     7,     7,     5,
     5,     9,     9,     0,     8,     0,     1,     0,     1,     1,
     1,     3,     3,     2,     2,     2,     3,     3,     8,     0,
     0,     9,     1,     3,     0,     1,     1,     1,     2,     3,
     5,     5,     0,     1,     1,     1,     1,     1,     3,     3,
     1,     1,     1,     1,     1,     0,     1,     1,     3,     3,
     7,     7,     5,     5,     7,     7,     0,     0,     0,     4,
     4,     1,     1,     2,     1,     2,     2,     1,     2,     2,
     2,     2,     2,     1,     3,     3,     3,     1,     3,     3,
     1,     3,     3,     3,     3,     3,     3,     1,     3,     3,
     1,     3,     1,     3,     3,     1,     1,     1,     1,     1,
     1,     1,     1,     1
};

static const short yydefact[] = {     0,
    69,     0,     0,     5,    65,    66,    67,    68,     1,     0,
     2,     4,    63,    64,    12,    14,     3,     0,     0,     0,
    10,    15,     6,     0,    16,     0,    50,     0,     0,    58,
    40,    18,    11,     0,    51,    52,    40,     0,    13,    59,
     0,    25,    27,     0,     0,    40,     0,    19,    20,    40,
     0,     0,     0,     0,     0,    46,     0,    41,    43,    44,
    45,     0,     0,     0,     0,     0,    17,    21,     0,    71,
     7,    53,    55,    54,     9,    61,     0,     0,     0,    60,
     0,     0,    26,    28,    38,    39,     0,    23,    46,     0,
     0,     0,     0,     0,    49,   192,     0,     0,   175,   164,
   165,   166,   167,   168,     0,     0,     0,     0,     0,     0,
   193,   171,   172,   173,   174,   195,   198,   204,   208,   211,
   218,   221,   223,   226,   233,     0,    42,     0,     0,     0,
    37,     0,    37,    22,   106,   192,     0,     0,     0,     0,
     0,     0,   151,     0,     0,   107,    40,   106,     0,     0,
    74,    76,    77,   106,   106,   106,   106,   106,   106,   106,
   106,   106,   106,   106,   106,   193,     0,    57,    56,    62,
   188,   194,     0,   193,   201,   202,   199,   200,   203,     0,
     0,   227,   231,   232,   228,   229,   230,     0,     0,     0,
   196,   197,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    47,    48,     0,
     0,     0,     0,     0,     0,     0,   105,   144,   145,     0,
     0,     0,     0,   146,     0,     0,     0,     0,     0,    92,
    70,    75,    93,    94,    95,    96,    97,    98,    99,   101,
   100,   102,   103,   104,     0,   108,     0,     0,   170,   169,
     0,     0,   180,   225,   205,   206,   207,   217,   209,   210,
   216,   212,   213,   214,   215,   219,   220,   222,   224,     0,
     0,     0,     0,     0,     0,    24,     0,     0,     0,   141,
     0,   137,   174,   140,     0,   234,     0,   148,   147,     0,
     0,     0,     0,     0,    88,     0,    79,    85,    82,    83,
    84,   150,     0,     0,   177,   178,   189,   191,   190,   187,
    30,    29,    32,    31,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   153,   115,   113,     0,     0,
     0,     0,    78,     0,     0,    81,     0,     0,   184,   183,
     0,     0,     0,    34,    33,    36,    35,     0,     0,     0,
     0,   143,   142,     0,   111,   109,   155,     0,     0,     0,
   131,   130,    91,     0,    80,    87,    86,     0,   176,   179,
     0,     0,     0,     0,     0,     0,     0,     0,   134,     0,
     0,   158,   156,   157,     0,   154,   117,   116,   114,    89,
    90,     0,   186,   185,   182,   181,   129,   128,     0,   139,
     0,     0,   112,   110,     0,   119,     0,     0,     0,   135,
     0,     0,     0,     0,     0,     0,   120,   121,     0,   124,
   149,   133,   132,   163,   152,     0,   159,     0,   127,   118,
   122,     0,   125,     0,   160,   126,     0,     0,   162,   161,
     0,     0,     0
};

static const short yydefgoto[] = {   441,
     9,    10,    11,    27,    28,    26,    19,    21,    22,    33,
    47,    48,    49,    62,    63,   214,   129,   130,    41,    57,
    58,    59,    60,    61,    34,    35,    36,    74,    29,    30,
    37,    13,    14,   148,    91,   149,   150,   151,   152,   296,
   297,   298,   336,   299,   300,   301,   153,   217,   154,   155,
   156,   157,   360,   359,   388,   406,   416,   417,   418,   419,
   420,   158,   159,   160,   402,   281,   399,   400,   161,   162,
   163,   164,   338,   165,   226,   325,   385,   412,   413,   434,
   111,   304,   305,   112,   113,   343,   247,   342,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   167,
   190,   126,   287
};

static const short yypact[] = {   136,
-32768,    39,    69,-32768,-32768,-32768,-32768,-32768,   136,   100,
-32768,-32768,-32768,-32768,-32768,    63,-32768,    92,    95,   103,
-32768,-32768,   139,   123,-32768,    97,   123,   186,    22,-32768,
-32768,   358,-32768,   133,    70,-32768,-32768,   145,-32768,-32768,
    27,-32768,-32768,   201,   217,-32768,   152,   358,-32768,-32768,
   170,   123,   239,   170,   -36,    47,   -14,-32768,-32768,   174,
-32768,   170,   170,   181,   188,   255,-32768,-32768,    64,-32768,
-32768,-32768,   191,   189,-32768,-32768,   260,   194,  1287,-32768,
   260,  1287,-32768,-32768,-32768,-32768,   205,   202,    74,    15,
   538,   203,   214,    59,-32768,   208,    98,   200,-32768,-32768,
-32768,-32768,-32768,-32768,  1287,  1287,  1287,  1287,  1287,   936,
   173,-32768,-32768,-32768,-32768,-32768,    58,-32768,   141,    33,
    71,   130,   230,   231,-32768,   215,-32768,   216,    30,    37,
-32768,   260,-32768,-32768,-32768,    10,   220,   221,   662,   228,
   232,   293,-32768,   233,   236,-32768,-32768,-32768,   227,   600,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   132,   234,-32768,-32768,-32768,
-32768,    56,   295,    56,-32768,-32768,-32768,-32768,-32768,   238,
   240,-32768,-32768,-32768,-32768,-32768,-32768,   975,   304,  1287,
-32768,-32768,  1287,  1287,  1287,  1287,  1287,  1287,   306,  1287,
  1287,  1287,  1287,  1287,  1287,  1287,  1287,-32768,-32768,   245,
   246,   247,   251,    42,   135,    49,-32768,-32768,-32768,   291,
   702,  1014,   250,-32768,   253,   258,  1053,  1092,   319,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   323,-32768,   741,   266,-32768,-32768,
   261,   262,   270,-32768,-32768,-32768,-32768,   154,   141,   141,
-32768,   154,   154,   154,   154,    71,    71,   130,   230,   170,
   170,   170,   170,   259,   271,-32768,   272,   273,   275,-32768,
   274,   278,   325,-32768,   276,-32768,   279,-32768,-32768,    98,
   283,   284,   288,   294,    75,   140,-32768,   318,-32768,   290,
-32768,-32768,   298,   302,   301,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   170,   170,   170,   170,  1131,  1170,
  1209,    98,   662,   662,    81,    56,-32768,-32768,   662,   662,
   305,  1287,-32768,   319,  1248,-32768,  1287,   307,-32768,-32768,
  1287,   780,   819,-32768,-32768,-32768,-32768,   308,   309,   310,
   311,-32768,-32768,   -29,   366,   367,    32,    98,   314,   314,
-32768,-32768,-32768,   312,-32768,-32768,-32768,   313,  1287,-32768,
   317,   320,   326,   327,   322,   328,   858,   858,-32768,   662,
   662,-32768,-32768,-32768,   329,    56,-32768,-32768,-32768,-32768,
-32768,   332,-32768,-32768,-32768,-32768,-32768,-32768,   333,   278,
   334,   170,-32768,-32768,   377,   155,   341,   662,   662,-32768,
   336,    14,   343,  1287,   330,   347,   155,-32768,   476,-32768,
-32768,-32768,-32768,-32768,-32768,   352,-32768,   349,-32768,-32768,
-32768,   405,-32768,   897,-32768,-32768,   350,   359,-32768,-32768,
   404,   430,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   422,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   385,-32768,-32768,   315,-32768,-32768,   -32,   -28,
   364,-32768,-32768,-32768,  -103,-32768,   394,-32768,-32768,   418,
     0,-32768,   252,   -47,-32768,-32768,    31,  -149,-32768,-32768,
   115,-32768,-32768,-32768,-32768,-32768,  -127,    73,-32768,-32768,
-32768,-32768,-32768,-32768,    93,-32768,-32768,-32768,    35,-32768,
    36,-32768,-32768,-32768,-32768,-32768,    76,   235,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    45,-32768,
   -12,  -332,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   237,
-32768,-32768,   -86,    43,    84,    46,   256,   257,-32768,   -76,
-32768,   -80,  -220
};


#define	YYLAST		1354


static const short yytable[] = {    12,
   232,   128,   125,    71,    53,   125,    75,   294,    12,   372,
   374,   220,   -69,    66,    83,    84,   411,    69,   175,   176,
   177,   178,   179,    31,     1,   211,   213,    55,    31,    56,
   210,    50,     1,   181,    76,    77,   392,   212,   379,     1,
    90,    15,   274,   188,     1,   382,   189,    50,    94,   277,
   196,     1,     5,     6,     7,     8,    80,    81,   383,   384,
     5,     6,     7,     8,    88,   225,    89,     5,     6,     7,
     8,    16,     5,     6,     7,     8,   171,    20,   166,     5,
     6,     7,     8,   425,   172,   134,    81,   197,   198,   199,
   147,    39,   174,   174,   174,   174,   174,   -50,   349,   351,
    96,   438,    18,   215,   -50,    25,   255,   256,   257,   -50,
   275,   252,   278,   254,   229,    78,   -50,   191,   192,    79,
    98,   200,   201,   202,   203,     1,   166,    99,   188,   170,
    81,   189,   100,   101,   102,   103,   104,   166,     1,    -8,
   133,    52,    78,   331,   284,   286,    79,   332,   357,   147,
   292,   286,   358,     5,     6,     7,     8,     2,    23,   414,
     3,     4,   415,    24,   110,    32,     5,     6,     7,     8,
   306,   245,   182,   183,   184,   185,   186,   187,   204,   205,
   174,   174,   174,   174,   174,   174,    38,   174,   174,   174,
   174,   174,   174,   174,   174,   355,   356,   193,   194,   195,
    51,   361,   362,    64,   188,   276,    81,   189,   197,   198,
   333,   334,    54,   182,   183,   184,   185,   186,   187,    65,
   230,    67,   311,   312,   313,   314,   233,   234,   235,   236,
   237,   238,   239,   240,   241,   242,   243,   244,    70,   259,
   260,    73,   286,   286,   353,   188,    82,    85,   189,   266,
   267,   364,   403,   404,    86,   125,   368,    87,   367,    92,
   125,    93,    56,    95,   370,   306,   306,   344,   345,   346,
   347,   131,   168,   132,   171,   173,   206,   326,   207,   258,
   422,   423,   232,   262,   263,   264,   265,   169,   208,   209,
   218,   219,   306,   223,   221,    96,   231,   248,   222,   227,
   284,   284,   228,    97,   246,   249,   253,   250,     1,   354,
   166,   166,   270,   271,   272,    98,   166,   166,   273,   279,
   288,   295,    99,   289,   290,   302,   315,   100,   101,   102,
   103,   104,   307,   428,   308,   309,   310,   125,   316,   317,
   318,   319,   322,   323,   320,   386,   324,   105,   106,   321,
   327,   328,   107,   108,   410,   329,   109,   306,   335,   110,
     1,   330,   337,   224,    42,   339,    43,   166,   166,   340,
    44,    45,   341,   369,   363,   375,   376,   380,   381,   411,
   377,   378,   387,    46,   393,   390,   391,   394,     5,     6,
     7,     8,   397,   395,   396,   166,   166,   405,   398,   407,
   408,   409,   424,   442,   429,   135,   166,   136,   137,  -123,
   138,   421,  -123,   427,   139,    97,   430,   439,   147,   166,
   140,   141,   435,   436,   142,   143,   440,    98,   144,   443,
    17,   147,    68,   145,    99,     5,     6,     7,     8,   100,
   101,   102,   103,   104,   127,    72,    40,   216,   365,   432,
   261,   431,   389,   401,   433,   282,   426,   283,     0,   105,
   106,   268,     0,   269,   107,   108,     0,     0,   109,     0,
     0,   110,     0,    70,  -123,   146,   135,     0,   136,   137,
   414,   138,     0,   415,     0,   139,    97,     0,     0,     0,
     0,   140,   141,     0,     0,   142,   143,     0,    98,   144,
     0,     0,     0,     0,   145,    99,     5,     6,     7,     8,
   100,   101,   102,   103,   104,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   105,   106,     0,     0,     0,   107,   108,     0,   135,   109,
   136,   137,   110,   138,    70,     0,   146,   139,    97,     0,
     0,     0,     0,   140,   141,     0,     0,   142,   143,     0,
    98,   144,     0,     0,     0,     0,   145,    99,     5,     6,
     7,     8,   100,   101,   102,   103,   104,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   105,   106,     0,     0,     0,   107,   108,     0,
   135,   109,   136,   137,   110,   138,    70,   -72,   146,   139,
    97,     0,     0,     0,     0,   140,   141,     0,     0,   142,
   143,     0,    98,   144,     0,     0,     0,     0,   145,    99,
     5,     6,     7,     8,   100,   101,   102,   103,   104,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   105,   106,     0,     0,     0,   107,
   108,     0,   135,   109,    96,   137,   110,   138,    70,   -73,
   146,   139,    97,     0,     0,     0,     0,   140,   141,     0,
     0,   142,   143,     0,    98,   144,     0,     0,     0,     0,
   145,    99,     0,     0,     0,     0,   100,   101,   102,   103,
   104,     0,   280,     0,    96,     0,     0,     0,     0,     0,
     0,     0,    97,     0,     0,     0,   105,   106,     0,     0,
     0,   107,   108,     0,    98,   109,     0,     0,   110,     0,
    70,    99,   146,     0,     0,     0,   100,   101,   102,   103,
   104,   303,     0,    96,     0,     0,     0,     0,     0,     0,
     0,    97,     0,     0,     0,     0,   105,   106,     0,     0,
     0,   107,   108,    98,     0,   109,     0,     0,   110,     0,
    99,     0,  -136,     0,     0,   100,   101,   102,   103,   104,
   371,     0,    96,     0,     0,     0,     0,     0,     0,     0,
    97,     0,     0,     0,     0,   105,   106,     0,     0,     0,
   107,   108,    98,     0,   109,     0,     0,   110,  -176,    99,
     0,     0,     0,     0,   100,   101,   102,   103,   104,   373,
     0,    96,     0,     0,     0,     0,     0,     0,     0,    97,
     0,     0,     0,     0,   105,   106,     0,     0,     0,   107,
   108,    98,     0,   109,     0,     0,   110,  -176,    99,     0,
     0,     0,     0,   100,   101,   102,   103,   104,   280,     0,
    96,     0,     0,     0,     0,     0,     0,     0,    97,     0,
     0,     0,     0,   105,   106,     0,     0,     0,   107,   108,
    98,     0,   109,     0,     0,   110,  -176,    99,     0,     0,
     0,     0,   100,   101,   102,   103,   104,   437,     0,    96,
     0,     0,     0,     0,     0,     0,     0,    97,     0,     0,
     0,     0,   105,   106,     0,     0,     0,   107,   108,    98,
     0,   109,     0,     0,   110,  -138,    99,     0,     0,     0,
     0,   100,   101,   102,   103,   104,   180,     0,    96,     0,
     0,     0,     0,     0,     0,     0,    97,     0,     0,     0,
     0,   105,   106,     0,     0,     0,   107,   108,    98,     0,
   109,     0,     0,   110,  -176,    99,     0,     0,     0,     0,
   100,   101,   102,   103,   104,   251,     0,    96,     0,     0,
     0,     0,     0,     0,     0,    97,     0,     0,     0,     0,
   105,   106,     0,     0,     0,   107,   108,    98,     0,   109,
     0,     0,   110,     0,    99,     0,     0,     0,     0,   100,
   101,   102,   103,   104,   285,     0,    96,     0,     0,     0,
     0,     0,     0,     0,    97,     0,     0,     0,     0,   105,
   106,     0,     0,     0,   107,   108,    98,     0,   109,     0,
     0,   110,     0,    99,     0,     0,     0,     0,   100,   101,
   102,   103,   104,   291,     0,    96,     0,     0,     0,     0,
     0,     0,     0,    97,     0,     0,     0,     0,   105,   106,
     0,     0,     0,   107,   108,    98,     0,   109,     0,     0,
   110,     0,    99,     0,     0,     0,     0,   100,   101,   102,
   103,   104,   293,     0,    96,     0,     0,     0,     0,     0,
     0,     0,    97,     0,     0,     0,     0,   105,   106,     0,
     0,     0,   107,   108,    98,     0,   109,     0,     0,   110,
     0,    99,     0,     0,     0,     0,   100,   101,   102,   103,
   104,   348,     0,    96,     0,     0,     0,     0,     0,     0,
     0,    97,     0,     0,     0,     0,   105,   106,     0,     0,
     0,   107,   108,    98,     0,   109,     0,     0,   110,     0,
    99,     0,     0,     0,     0,   100,   101,   102,   103,   104,
   350,     0,    96,     0,     0,     0,     0,     0,     0,     0,
    97,     0,     0,     0,     0,   105,   106,     0,     0,     0,
   107,   108,    98,     0,   109,     0,     0,   110,     0,    99,
     0,     0,     0,     0,   100,   101,   102,   103,   104,   352,
     0,    96,     0,     0,     0,     0,     0,     0,     0,    97,
     0,     0,     0,     0,   105,   106,     0,     0,     0,   107,
   108,    98,     0,   109,     0,     0,   110,     0,    99,     0,
     0,     0,     0,   100,   101,   102,   103,   104,   366,     0,
    96,     0,     0,     0,     0,     0,     0,     0,    97,     0,
     0,     0,     0,   105,   106,     0,     0,     0,   107,   108,
    98,     0,   109,     0,     0,   110,     0,    99,     0,     0,
     0,     0,   100,   101,   102,   103,   104,     0,     0,    96,
     0,     0,     0,     0,     0,     0,     0,    97,     0,     0,
     0,     0,   105,   106,     0,     0,     0,   107,   108,    98,
     0,   109,     0,     0,   110,     0,    99,     0,     0,     0,
     0,   100,   101,   102,   103,   104,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   105,   106,     0,     0,     0,   107,   108,     0,     0,
   109,     0,     0,   110
};

static const short yycheck[] = {     0,
   150,    82,    79,    51,    37,    82,    54,   228,     9,   342,
   343,   139,     3,    46,    62,    63,     3,    50,   105,   106,
   107,   108,   109,    24,     3,   129,   130,     1,    29,     3,
     1,    32,     3,   110,    71,    72,   369,     1,    68,     3,
    69,     3,     1,    73,     3,    14,    76,    48,    77,     1,
    18,     3,    31,    32,    33,    34,    71,    72,    27,    28,
    31,    32,    33,    34,     1,   142,     3,    31,    32,    33,
    34,     3,    31,    32,    33,    34,    67,    15,    91,    31,
    32,    33,    34,    70,    97,    71,    72,    55,    56,    19,
    91,    70,   105,   106,   107,   108,   109,    68,   319,   320,
     3,   434,     3,   132,    68,     3,   193,   194,   195,    68,
   214,   188,   216,   190,   147,    69,    68,    60,    61,    73,
    23,    51,    52,    53,    54,     3,   139,    30,    73,    71,
    72,    76,    35,    36,    37,    38,    39,   150,     3,     1,
    67,    72,    69,    69,   221,   222,    73,    73,    68,   150,
   227,   228,    72,    31,    32,    33,    34,    22,    67,     5,
    25,    26,     8,    69,    67,    69,    31,    32,    33,    34,
   247,    40,    41,    42,    43,    44,    45,    46,    49,    50,
   193,   194,   195,   196,   197,   198,     1,   200,   201,   202,
   203,   204,   205,   206,   207,   323,   324,    57,    58,    59,
    68,   329,   330,     3,    73,    71,    72,    76,    55,    56,
    71,    72,    68,    41,    42,    43,    44,    45,    46,     3,
   148,    70,   270,   271,   272,   273,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,    69,   197,
   198,     3,   319,   320,   321,    73,    73,    67,    76,   204,
   205,   332,   380,   381,    67,   332,   337,     3,   335,    69,
   337,    73,     3,    70,   341,   342,   343,   315,   316,   317,
   318,    67,    70,    72,    67,    76,    47,   290,    48,   196,
   408,   409,   432,   200,   201,   202,   203,    74,    74,    74,
    71,    71,   369,     1,    67,     3,    70,     3,    67,    67,
   377,   378,    67,    11,    71,    68,     3,    68,     3,   322,
   323,   324,    68,    68,    68,    23,   329,   330,    68,    29,
    71,     3,    30,    71,    67,     3,    68,    35,    36,    37,
    38,    39,    67,   414,    74,    74,    67,   414,    68,    68,
    68,    67,    18,    68,    71,   358,    68,    55,    56,    72,
    68,    68,    60,    61,   402,    68,    64,   434,    41,    67,
     3,    68,    73,    71,     7,    68,     9,   380,   381,    68,
    13,    14,    72,    67,    70,    68,    68,    12,    12,     3,
    71,    71,    69,    26,    68,    74,    74,    68,    31,    32,
    33,    34,    71,    68,    68,   408,   409,    69,    71,    68,
    68,    68,    67,     0,    75,     1,   419,     3,     4,     5,
     6,    71,     8,    71,    10,    11,    70,    68,   419,   432,
    16,    17,    71,    75,    20,    21,    68,    23,    24,     0,
     9,   432,    48,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    81,    52,    29,   133,   334,   419,
   199,   417,   360,   378,   419,   221,   412,   221,    -1,    55,
    56,   206,    -1,   207,    60,    61,    -1,    -1,    64,    -1,
    -1,    67,    -1,    69,    70,    71,     1,    -1,     3,     4,
     5,     6,    -1,     8,    -1,    10,    11,    -1,    -1,    -1,
    -1,    16,    17,    -1,    -1,    20,    21,    -1,    23,    24,
    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    55,    56,    -1,    -1,    -1,    60,    61,    -1,     1,    64,
     3,     4,    67,     6,    69,    -1,    71,    10,    11,    -1,
    -1,    -1,    -1,    16,    17,    -1,    -1,    20,    21,    -1,
    23,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    55,    56,    -1,    -1,    -1,    60,    61,    -1,
     1,    64,     3,     4,    67,     6,    69,    70,    71,    10,
    11,    -1,    -1,    -1,    -1,    16,    17,    -1,    -1,    20,
    21,    -1,    23,    24,    -1,    -1,    -1,    -1,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    55,    56,    -1,    -1,    -1,    60,
    61,    -1,     1,    64,     3,     4,    67,     6,    69,    70,
    71,    10,    11,    -1,    -1,    -1,    -1,    16,    17,    -1,
    -1,    20,    21,    -1,    23,    24,    -1,    -1,    -1,    -1,
    29,    30,    -1,    -1,    -1,    -1,    35,    36,    37,    38,
    39,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    11,    -1,    -1,    -1,    55,    56,    -1,    -1,
    -1,    60,    61,    -1,    23,    64,    -1,    -1,    67,    -1,
    69,    30,    71,    -1,    -1,    -1,    35,    36,    37,    38,
    39,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    11,    -1,    -1,    -1,    -1,    55,    56,    -1,    -1,
    -1,    60,    61,    23,    -1,    64,    -1,    -1,    67,    -1,
    30,    -1,    71,    -1,    -1,    35,    36,    37,    38,    39,
     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    11,    -1,    -1,    -1,    -1,    55,    56,    -1,    -1,    -1,
    60,    61,    23,    -1,    64,    -1,    -1,    67,    68,    30,
    -1,    -1,    -1,    -1,    35,    36,    37,    38,    39,     1,
    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    11,
    -1,    -1,    -1,    -1,    55,    56,    -1,    -1,    -1,    60,
    61,    23,    -1,    64,    -1,    -1,    67,    68,    30,    -1,
    -1,    -1,    -1,    35,    36,    37,    38,    39,     1,    -1,
     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    11,    -1,
    -1,    -1,    -1,    55,    56,    -1,    -1,    -1,    60,    61,
    23,    -1,    64,    -1,    -1,    67,    68,    30,    -1,    -1,
    -1,    -1,    35,    36,    37,    38,    39,     1,    -1,     3,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    11,    -1,    -1,
    -1,    -1,    55,    56,    -1,    -1,    -1,    60,    61,    23,
    -1,    64,    -1,    -1,    67,    68,    30,    -1,    -1,    -1,
    -1,    35,    36,    37,    38,    39,     1,    -1,     3,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    11,    -1,    -1,    -1,
    -1,    55,    56,    -1,    -1,    -1,    60,    61,    23,    -1,
    64,    -1,    -1,    67,    68,    30,    -1,    -1,    -1,    -1,
    35,    36,    37,    38,    39,     1,    -1,     3,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    11,    -1,    -1,    -1,    -1,
    55,    56,    -1,    -1,    -1,    60,    61,    23,    -1,    64,
    -1,    -1,    67,    -1,    30,    -1,    -1,    -1,    -1,    35,
    36,    37,    38,    39,     1,    -1,     3,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    11,    -1,    -1,    -1,    -1,    55,
    56,    -1,    -1,    -1,    60,    61,    23,    -1,    64,    -1,
    -1,    67,    -1,    30,    -1,    -1,    -1,    -1,    35,    36,
    37,    38,    39,     1,    -1,     3,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    11,    -1,    -1,    -1,    -1,    55,    56,
    -1,    -1,    -1,    60,    61,    23,    -1,    64,    -1,    -1,
    67,    -1,    30,    -1,    -1,    -1,    -1,    35,    36,    37,
    38,    39,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    11,    -1,    -1,    -1,    -1,    55,    56,    -1,
    -1,    -1,    60,    61,    23,    -1,    64,    -1,    -1,    67,
    -1,    30,    -1,    -1,    -1,    -1,    35,    36,    37,    38,
    39,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    11,    -1,    -1,    -1,    -1,    55,    56,    -1,    -1,
    -1,    60,    61,    23,    -1,    64,    -1,    -1,    67,    -1,
    30,    -1,    -1,    -1,    -1,    35,    36,    37,    38,    39,
     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    11,    -1,    -1,    -1,    -1,    55,    56,    -1,    -1,    -1,
    60,    61,    23,    -1,    64,    -1,    -1,    67,    -1,    30,
    -1,    -1,    -1,    -1,    35,    36,    37,    38,    39,     1,
    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    11,
    -1,    -1,    -1,    -1,    55,    56,    -1,    -1,    -1,    60,
    61,    23,    -1,    64,    -1,    -1,    67,    -1,    30,    -1,
    -1,    -1,    -1,    35,    36,    37,    38,    39,     1,    -1,
     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    11,    -1,
    -1,    -1,    -1,    55,    56,    -1,    -1,    -1,    60,    61,
    23,    -1,    64,    -1,    -1,    67,    -1,    30,    -1,    -1,
    -1,    -1,    35,    36,    37,    38,    39,    -1,    -1,     3,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    11,    -1,    -1,
    -1,    -1,    55,    56,    -1,    -1,    -1,    60,    61,    23,
    -1,    64,    -1,    -1,    67,    -1,    30,    -1,    -1,    -1,
    -1,    35,    36,    37,    38,    39,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    55,    56,    -1,    -1,    -1,    60,    61,    -1,    -1,
    64,    -1,    -1,    67
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */


/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif



/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 6:
{   if (!((CCompilerKernel*)pCompKrnl)->OnGlobalFunctionBegins(yyvsp[-2], yyvsp[-1])) YYERROR; ;
    break;}
case 7:
{   ((CCompilerKernel*)pCompKrnl)->OnGlobalFunctionEnds(yyvsp[0]); ;
    break;}
case 8:
{   if (!((CCompilerKernel*)pCompKrnl)->OnGlobalFunctionBegins(yyvsp[-2], yyvsp[-1])) YYERROR; ;
    break;}
case 9:
{   ((CCompilerKernel*)pCompKrnl)->OnGlobalFunctionEnds(yyvsp[0]); ;
    break;}
case 10:
{ if (!((CCompilerKernel*)pCompKrnl)->OnUnitBegin(yyvsp[-1], yyvsp[0])) YYERROR; ;
    break;}
case 11:
{ ((CCompilerKernel*)pCompKrnl)->OnUnitEnd();	;
    break;}
case 12:
{ if (!((CCompilerKernel*)pCompKrnl)->OnStructBegin(yyvsp[0])) YYERROR; ;
    break;}
case 13:
{ ((CCompilerKernel*)pCompKrnl)->OnStructEnd();	;
    break;}
case 14:
{ ((CCompilerKernel*)pCompKrnl)->OnEmptySuper(yyval); ;
    break;}
case 16:
{ yyval=yyvsp[0]; ;
    break;}
case 25:
{ ((CCompilerKernel*)pCompKrnl)->OnConstructorBegins(); ;
    break;}
case 26:
{ ((CCompilerKernel*)pCompKrnl)->OnConstructorEnds(yyvsp[0]); ;
    break;}
case 27:
{ ((CCompilerKernel*)pCompKrnl)->OnDestructorBegins(); ;
    break;}
case 28:
{ ((CCompilerKernel*)pCompKrnl)->OnDestructorEnds(yyvsp[0]); ;
    break;}
case 29:
{ ((CCompilerKernel*)pCompKrnl)->OnEventEnds(yyvsp[0]); ;
    break;}
case 30:
{ ((CCompilerKernel*)pCompKrnl)->OnEventEnds(yyvsp[0]); ;
    break;}
case 31:
{ ((CCompilerKernel*)pCompKrnl)->OnEventEnds(yyvsp[0]); ;
    break;}
case 32:
{ ((CCompilerKernel*)pCompKrnl)->OnEventEnds(yyvsp[0]); ;
    break;}
case 33:
{ ((CCompilerKernel*)pCompKrnl)->OnMethodEnds(yyvsp[0]); ;
    break;}
case 34:
{ ((CCompilerKernel*)pCompKrnl)->OnMethodEnds(yyvsp[0]); ;
    break;}
case 35:
{ ((CCompilerKernel*)pCompKrnl)->OnMethodEnds(yyvsp[0]); ;
    break;}
case 36:
{ ((CCompilerKernel*)pCompKrnl)->OnMethodEnds(yyvsp[0]); ;
    break;}
case 37:
{ if (!((CCompilerKernel*)pCompKrnl)->OnMethodBegins(yyvsp[-1])) YYABORT; ;
    break;}
case 38:
{ if (!((CCompilerKernel*)pCompKrnl)->OnEventBegins(yyvsp[-1], true)) YYABORT; ;
    break;}
case 39:
{ if (!((CCompilerKernel*)pCompKrnl)->OnEventBegins(yyvsp[-1], false)) YYABORT; ;
    break;}
case 40:
{  ((CCompilerKernel*)pCompKrnl)->m_pCurrentType=&yyvsp[0].m_DataType; ;
    break;}
case 41:
{ ((CCompilerKernel*)pCompKrnl)->OnFieldVarDecl(yyvsp[0]); ;
    break;}
case 42:
{ ((CCompilerKernel*)pCompKrnl)->OnFieldVarDecl(yyvsp[0]); ;
    break;}
case 46:
{ ((CCompilerKernel*)pCompKrnl)->OnFieldVarDeclIdentifier(yyval, yyvsp[0]); ;
    break;}
case 47:
{ ((CCompilerKernel*)pCompKrnl)->OnFieldVarDeclArrayIdent(yyval, yyvsp[-3], yyvsp[-1]); ;
    break;}
case 48:
{ ((CCompilerKernel*)pCompKrnl)->OnFieldVarDeclArrayMore(yyval, yyvsp[-3], yyvsp[-1]); ;
    break;}
case 49:
{ ((CCompilerKernel*)pCompKrnl)->OnFieldVarDeclSet(yyval, yyvsp[-2]); ;
    break;}
case 54:
{ ((CCompilerKernel*)pCompKrnl)->OnFormalParam(yyvsp[0]); ;
    break;}
case 55:
{ ((CCompilerKernel*)pCompKrnl)->OnParamDeclIdentifier(yyval, yyvsp[0]); ;
    break;}
case 56:
{ ((CCompilerKernel*)pCompKrnl)->OnParamDeclArray(yyval, yyvsp[-2]); ;
    break;}
case 57:
{ ((CCompilerKernel*)pCompKrnl)->OnParamDeclSet(yyval, yyvsp[-2]); ;
    break;}
case 69:
{ ((CCompilerKernel*)pCompKrnl)->OnReferenceType(yyval, yyvsp[0]); ;
    break;}
case 70:
{ ((CCompilerKernel*)pCompKrnl)->OnBlockEnds();  yyval=yyvsp[-1]; ;
    break;}
case 71:
{ ((CCompilerKernel*)pCompKrnl)->OnBlockBegins();       ;
    break;}
case 72:
{ yyval.SetNewCode(); ;
    break;}
case 75:
{ ((CCompilerKernel*)pCompKrnl)->OnBlockStatementConcat(yyval, yyvsp[-1], yyvsp[0]); ;
    break;}
case 78:
{ yyval=yyvsp[-1]; ;
    break;}
case 79:
{ yyval=yyvsp[0]; ;
    break;}
case 80:
{ ((CCompilerKernel*)pCompKrnl)->OnLocalVarDeclConcat(yyval, yyvsp[-2], yyvsp[0]); ;
    break;}
case 81:
{ ((CCompilerKernel*)pCompKrnl)->OnVarDeclInitDone(yyval, yyvsp[-1], yyvsp[0]); ;
    break;}
case 82:
{ yyval=yyvsp[0]; ;
    break;}
case 83:
{ ((CCompilerKernel*)pCompKrnl)->OnArrayVarDecl(yyval, yyvsp[0]); ;
    break;}
case 85:
{ yyval.SetNone(); ;
    break;}
case 86:
{ ((CCompilerKernel*)pCompKrnl)->OnVarDeclInit(yyval, yyvsp[0]); ;
    break;}
case 87:
{ yyval.SetNone(); ;
    break;}
case 88:
{ ((CCompilerKernel*)pCompKrnl)->OnSimpleVarDecl(yyval, yyvsp[0]); ;
    break;}
case 89:
{ ((CCompilerKernel*)pCompKrnl)->OnArrayVarDeclIdent(yyval, yyvsp[-3], yyvsp[-1]); ;
    break;}
case 90:
{ ((CCompilerKernel*)pCompKrnl)->OnArrayVarDeclMore(yyval, yyvsp[-3], yyvsp[-1]); ;
    break;}
case 91:
{ ((CCompilerKernel*)pCompKrnl)->OnSetVarDecl(yyval, yyvsp[-2]); ;
    break;}
case 105:
{ yyval.SetNewCode(); ;
    break;}
case 106:
{ ((CCompilerKernel*)pCompKrnl)->OnEndOfStatement(); ;
    break;}
case 107:
{ yyval.SetNewCode(); ;
    break;}
case 109:
{	((CCompilerKernel*)pCompKrnl)->OnIfStatement(yyval, yyvsp[-2], yyvsp[0]); ;
    break;}
case 110:
{	((CCompilerKernel*)pCompKrnl)->OnIfStatement(yyval, yyvsp[-4], yyvsp[-2], yyvsp[0]); ;
    break;}
case 113:
{ ((CCompilerKernel*)pCompKrnl)->OnSwitchBegins(yyvsp[-1]); ;
    break;}
case 114:
{ ((CCompilerKernel*)pCompKrnl)->OnSwitchEnds(yyval); ;
    break;}
case 115:
{ yyvsp[-1].SetError(); ((CCompilerKernel*)pCompKrnl)->OnSwitchBegins(yyvsp[-1]); ;
    break;}
case 116:
{ ((CCompilerKernel*)pCompKrnl)->OnSwitchEnds(yyval); ;
    break;}
case 117:
{ ((CCompilerKernel*)pCompKrnl)->m_nLevel++; ;
    break;}
case 118:
{ ((CCompilerKernel*)pCompKrnl)->m_nLevel--; ;
    break;}
case 123:
{ ((CCompilerKernel*)pCompKrnl)->OnSwitchBlockStmtS(yyvsp[0]); ;
    break;}
case 126:
{ ((CCompilerKernel*)pCompKrnl)->OnSwitchCase(yyvsp[-1]);  ;
    break;}
case 127:
{ ((CCompilerKernel*)pCompKrnl)->OnSwitchDefault(); ;
    break;}
case 128:
{ ((CCompilerKernel*)pCompKrnl)->OnDoStatement(yyval, yyvsp[-5], yyvsp[-2]); ;
    break;}
case 130:
{ ((CCompilerKernel*)pCompKrnl)->OnWhileStatement(yyval, yyvsp[-2], yyvsp[0]); ;
    break;}
case 132:
{ ((CCompilerKernel*)pCompKrnl)->OnForStatement(yyval, yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[0]); ;
    break;}
case 133:
{ yyval.SetNewCode(); ;
    break;}
case 134:
{ ((CCompilerKernel*)pCompKrnl)->OnSetForBegin(yyvsp[-1]); ;
    break;}
case 135:
{ ((CCompilerKernel*)pCompKrnl)->OnSetForEnd(yyval, yyvsp[-5], yyvsp[-3], yyvsp[0]); ;
    break;}
case 136:
{  yyval.SetNewCode(); ;
    break;}
case 138:
{  yyval.SetNewCode(); ;
    break;}
case 141:
{  yyval.SetError(); ;
    break;}
case 142:
{  ((CCompilerKernel*)pCompKrnl)->OnExprList(yyval, yyvsp[-2], yyvsp[0]);  ;
    break;}
case 143:
{  yyval.SetError(); ;
    break;}
case 144:
{ ((CCompilerKernel*)pCompKrnl)->OnBreakStatement(yyval);	;
    break;}
case 145:
{ ((CCompilerKernel*)pCompKrnl)->OnContinueStatement(yyval);	;
    break;}
case 146:
{ ((CCompilerKernel*)pCompKrnl)->OnReturnStatementVoid(yyval);		;
    break;}
case 147:
{ ((CCompilerKernel*)pCompKrnl)->OnReturnStatementValue(yyval, yyvsp[-1]);	;
    break;}
case 148:
{ ((CCompilerKernel*)pCompKrnl)->OnReturnStatementError(yyval);		;
    break;}
case 149:
{ ((CCompilerKernel*)pCompKrnl)->OnEventCallEnds(yyval, yyvsp[-7], yyvsp[-5], yyvsp[-4], yyvsp[-2]); ;
    break;}
case 150:
{ ((CCompilerKernel*)pCompKrnl)->OnEventCallBegins(yyval, yyvsp[-2], yyvsp[0]); ;
    break;}
case 151:
{  ((CCompilerKernel*)pCompKrnl)->OnSendToBegins(); ;
    break;}
case 152:
{  ((CCompilerKernel*)pCompKrnl)->OnSendToEnds(yyval, yyvsp[-5], yyvsp[-3], yyvsp[-1]); ;
    break;}
case 153:
{  ((CCompilerKernel*)pCompKrnl)->OnSendToPrimaryExpr(yyval, yyvsp[0]); ;
    break;}
case 154:
{  ((CCompilerKernel*)pCompKrnl)->OnSendToPrimaryExprList(yyval, yyvsp[-2], yyvsp[0]); ;
    break;}
case 155:
{ yyval.SetConstant(0, (CCompilerKernel*)pCompKrnl); ;
    break;}
case 156:
{ yyval.SetConstant(WAIT, (CCompilerKernel*)pCompKrnl); ;
    break;}
case 157:
{ yyval.SetConstant(WAITFIRST, (CCompilerKernel*)pCompKrnl); ;
    break;}
case 158:
{ yyval.SetConstant(NOTIFICATION, (CCompilerKernel*)pCompKrnl); ;
    break;}
case 160:
{ ((CCompilerKernel*)pCompKrnl)->OnSendToEventList(yyval, yyvsp[-2], yyvsp[-1]); ;
    break;}
case 161:
{ ((CCompilerKernel*)pCompKrnl)->OnSendToEventEnds(yyval, yyvsp[-4], yyvsp[-2], yyvsp[-1]); ;
    break;}
case 162:
{ ((CCompilerKernel*)pCompKrnl)->OnSendToEventEndsError(yyval); ;
    break;}
case 163:
{ ((CCompilerKernel*)pCompKrnl)->OnSendToEventBegins(yyval, yyvsp[-1]); ;
    break;}
case 169:
{ yyval=yyvsp[-1]; ;
    break;}
case 170:
{ yyval.SetError(); ;
    break;}
case 175:
{ ((CCompilerKernel*)pCompKrnl)->OnThis(yyval); ;
    break;}
case 176:
{ yyval.SetNewCode();	;
    break;}
case 178:
{ ((CCompilerKernel*)pCompKrnl)->OnArgumentFirst(yyval, yyvsp[0]);		;
    break;}
case 179:
{ ((CCompilerKernel*)pCompKrnl)->OnArgumentNext(yyval, yyvsp[-2], yyvsp[0]);	;
    break;}
case 180:
{ ((CCompilerKernel*)pCompKrnl)->OnFieldAccess(yyval, yyvsp[-2], yyvsp[0]); ;
    break;}
case 181:
{	((CCompilerKernel*)pCompKrnl)->OnMethodInvocPrimaryIdentEnds(yyval, yyvsp[-6], yyvsp[-4], yyvsp[-2], yyvsp[-1]);	;
    break;}
case 182:
{	((CCompilerKernel*)pCompKrnl)->OnMethodInvocEndsError(yyval);	;
    break;}
case 183:
{	((CCompilerKernel*)pCompKrnl)->OnMethodInvocIdentEnds(yyval, yyvsp[-4], yyvsp[-2], yyvsp[-1]);	;
    break;}
case 184:
{	((CCompilerKernel*)pCompKrnl)->OnMethodInvocEndsError(yyval); ;
    break;}
case 185:
{	((CCompilerKernel*)pCompKrnl)->OnMethodInvocSuperEnds(yyval, yyvsp[-4], yyvsp[-2], yyvsp[-1]);	;
    break;}
case 186:
{	((CCompilerKernel*)pCompKrnl)->OnMethodInvocEndsError(yyval); ;
    break;}
case 187:
{ ((CCompilerKernel*)pCompKrnl)->OnMethodInvocPrimaryIdentBegins(yyval, yyvsp[-3], yyvsp[-1]); ;
    break;}
case 188:
{ ((CCompilerKernel*)pCompKrnl)->OnMethodInvocIdentBegins(yyval, yyvsp[-1]); ;
    break;}
case 189:
{ ((CCompilerKernel*)pCompKrnl)->OnMethodInvocSuperBegins(yyval, yyvsp[-1]); ;
    break;}
case 190:
{ ((CCompilerKernel*)pCompKrnl)->OnArrayAccess(yyval, yyvsp[-3], yyvsp[-1]);  ;
    break;}
case 191:
{ ((CCompilerKernel*)pCompKrnl)->OnArrayAccessError(yyval, yyvsp[-3]); ;
    break;}
case 192:
{ ((CCompilerKernel*)pCompKrnl)->OnLocalVarOrMember(yyval,yyvsp[0]); ;
    break;}
case 194:
{ ((CCompilerKernel*)pCompKrnl)->OnDupExpr(yyval, yyvsp[0]); ;
    break;}
case 196:
{ ((CCompilerKernel*)pCompKrnl)->OnPostfixExpr(yyval, yyvsp[-1], '+');	;
    break;}
case 197:
{ ((CCompilerKernel*)pCompKrnl)->OnPostfixExpr(yyval, yyvsp[-1], '-');	;
    break;}
case 199:
{ ((CCompilerKernel*)pCompKrnl)->OnUnaryExpr(yyval, yyvsp[0], 'P');	;
    break;}
case 200:
{ ((CCompilerKernel*)pCompKrnl)->OnUnaryExpr(yyval, yyvsp[0], 'M');	;
    break;}
case 201:
{ ((CCompilerKernel*)pCompKrnl)->OnUnaryExpr(yyval, yyvsp[0], '+');	;
    break;}
case 202:
{ ((CCompilerKernel*)pCompKrnl)->OnUnaryExpr(yyval, yyvsp[0], '-');	;
    break;}
case 203:
{ ((CCompilerKernel*)pCompKrnl)->OnUnaryExpr(yyval, yyvsp[0], '!');	;
    break;}
case 205:
{ ((CCompilerKernel*)pCompKrnl)->OnBinaryOperation(yyval, yyvsp[-2], yyvsp[0], '*');  ;
    break;}
case 206:
{ ((CCompilerKernel*)pCompKrnl)->OnBinaryOperation(yyval, yyvsp[-2], yyvsp[0], '/');  ;
    break;}
case 207:
{ ((CCompilerKernel*)pCompKrnl)->OnBinaryOperation(yyval, yyvsp[-2], yyvsp[0], '%');  ;
    break;}
case 209:
{ ((CCompilerKernel*)pCompKrnl)->OnBinaryOperation(yyval, yyvsp[-2], yyvsp[0], '+');  ;
    break;}
case 210:
{ ((CCompilerKernel*)pCompKrnl)->OnBinaryOperation(yyval, yyvsp[-2], yyvsp[0], '-');  ;
    break;}
case 212:
{ ((CCompilerKernel*)pCompKrnl)->OnRelatEqualExpr(yyval, yyvsp[-2], yyvsp[0], '<');	;
    break;}
case 213:
{ ((CCompilerKernel*)pCompKrnl)->OnRelatEqualExpr(yyval, yyvsp[-2], yyvsp[0], '>');	;
    break;}
case 214:
{ ((CCompilerKernel*)pCompKrnl)->OnRelatEqualExpr(yyval, yyvsp[-2], yyvsp[0], 'L');	;
    break;}
case 215:
{ ((CCompilerKernel*)pCompKrnl)->OnRelatEqualExpr(yyval, yyvsp[-2], yyvsp[0], 'G');	;
    break;}
case 216:
{ ((CCompilerKernel*)pCompKrnl)->OnInstanceOf(yyval, yyvsp[-2], yyvsp[0]);	;
    break;}
case 217:
{ ((CCompilerKernel*)pCompKrnl)->OnIn(yyval, yyvsp[-2], yyvsp[0]); ;
    break;}
case 219:
{ ((CCompilerKernel*)pCompKrnl)->OnRelatEqualExpr(yyval, yyvsp[-2], yyvsp[0], '='); ;
    break;}
case 220:
{ ((CCompilerKernel*)pCompKrnl)->OnRelatEqualExpr(yyval, yyvsp[-2], yyvsp[0], '!'); ;
    break;}
case 222:
{ ((CCompilerKernel*)pCompKrnl)->OnAndOrExpr(yyval, yyvsp[-2], yyvsp[0], '&'); ;
    break;}
case 224:
{ ((CCompilerKernel*)pCompKrnl)->OnAndOrExpr(yyval, yyvsp[-2], yyvsp[0], '|'); ;
    break;}
case 225:
{	((CCompilerKernel*)pCompKrnl)->OnAssign(yyval, yyvsp[-2], yyvsp[-1], yyvsp[0]);  ;
    break;}
case 227:
{	yyval.SetConstant('=', (CCompilerKernel*)pCompKrnl); ;
    break;}
case 228:
{	yyval.SetConstant('*', (CCompilerKernel*)pCompKrnl); ;
    break;}
case 229:
{	yyval.SetConstant('/', (CCompilerKernel*)pCompKrnl); ;
    break;}
case 230:
{	yyval.SetConstant('%', (CCompilerKernel*)pCompKrnl); ;
    break;}
case 231:
{	yyval.SetConstant('+', (CCompilerKernel*)pCompKrnl); ;
    break;}
case 232:
{	yyval.SetConstant('-', (CCompilerKernel*)pCompKrnl); ;
    break;}
case 233:
{	((CCompilerKernel*)pCompKrnl)->OnConstantExpr(yyval, yyvsp[0]);	 ;
    break;}
case 234:
{	((CCompilerKernel*)pCompKrnl)->OnBoolExpr(yyval, yyvsp[0]);	 ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */


  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
